@page "/order-confirmation"
@inject IShoppingCartService ShoppingCartService
@inject NavigationManager NavigationManager

<h4>Order Details</h4>

<ul>
    @foreach (var cartItem in ShoppingCartService.ShoppingCartItems)
    {
        <li>
            <div class="order-item">
                <img src="@cartItem.ImageUrl" alt="Shop Image" width="50" height="50" />
                <div class="item-details">
                    <h6>@cartItem.Name</h6>
                    <p>Price: $@cartItem.Price</p>
                </div>
            </div>
        </li>
    }
</ul>

<h4>User Details</h4>

<div class="form-group">
    <label for="name">Name</label>
    <input id="name" class="form-control" @bind="orderDetails.Name" />
</div>

<div class="form-group">
    <label for="email">Email</label>
    <input id="email" class="form-control" @bind="orderDetails.Email" />
</div>

<button class="btn btn-primary" @onclick="OrderConfirm" disabled="@(!IsValidOrderDetails())">Confirm Order</button>

@code {
    private OrderDetails orderDetails = new OrderDetails();

    private bool IsValidOrderDetails()
    {
        // Check if the name is not empty
        bool isNameValid = !string.IsNullOrWhiteSpace(orderDetails.Name);

        // Check if the email is not empty and in a valid email format
        bool isEmailValid = !string.IsNullOrWhiteSpace(orderDetails.Email) && IsValidEmail(orderDetails.Email);

        // Return true if both name and email are valid
        return isNameValid && isEmailValid;
    }

    private bool IsValidEmail(string email)
    {
        return System.Text.RegularExpressions.Regex.IsMatch(email, @"^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$");
    }

    private void OrderConfirm()
    {
        // Check if user details are valid
        if (IsValidOrderDetails())
        {
            // Create an order or perform other order-related actions.
            var order = new Order
                {
                    UserDetails = orderDetails,
                    Items = ShoppingCartService.ShoppingCartItems,
                    TotalPrice = GetTotalPrice(),
                    OrderDate = DateTime.Now, // Add the order date
                };

            // Clear the shopping cart (update your IShoppingCartService accordingly).
            ShoppingCartService.ClearCart();

            // Redirect the user to a "Thank You" page or any other relevant page.
            NavigationManager.NavigateTo("/thank-you");
        }
    }

    // This method calculates the total price of items in the shopping cart.
    private decimal GetTotalPrice()
    {
        return ShoppingCartService.ShoppingCartItems.Sum(item => (decimal)item.Price);
    }
}
